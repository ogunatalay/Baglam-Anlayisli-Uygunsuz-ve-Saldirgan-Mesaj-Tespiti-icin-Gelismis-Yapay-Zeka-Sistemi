# -*- coding: utf-8 -*-
"""Untitled21.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EvYJWrE17c1zQeeUR4qP_PqZIqM_NEVs
"""

!pip install --upgrade transformers

# âœ… GEREKLÄ° KURULUMLAR
!pip install transformers datasets --quiet

# âœ… GEREKLÄ° KÃœTÃœPHANELER
import pandas as pd
import torch
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt
from transformers import BertTokenizer, BertForSequenceClassification, Trainer, TrainingArguments
from torch.utils.data import Dataset

# âœ… 1. VERÄ° YÃœKLEME (Colab dosya sistemi iÃ§inden doÄŸrudan)
df_tr = pd.read_csv("/content/turkce_baglamli_veri.csv")[["CONTEXT_INPUT", "Etiket"]].rename(columns={"Etiket": "label"})
df_eng = pd.read_csv("/content/context_aware_labeled_data.csv")[["CONTEXT_INPUT", "class"]].rename(columns={"class": "label"})

# âœ… 2. VERÄ° BÄ°RLEÅžTÄ°RME
df_combined = pd.concat([df_tr, df_eng], ignore_index=True)

# âœ… 3. Ã–ZELLÄ°K-ETÄ°KET AYIRMA
X = df_combined["CONTEXT_INPUT"].tolist()
y = df_combined["label"].tolist()

# âœ… 4. TRAIN/VAL/TEST SPLIT
X_train_full, X_test, y_train_full, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)
X_train, X_val, y_train, y_val = train_test_split(X_train_full, y_train_full, test_size=0.1, stratify=y_train_full, random_state=42)

# âœ… 5. TOKENIZER
tokenizer = BertTokenizer.from_pretrained("bert-base-multilingual-cased")

# âœ… 6. DATASET SINIFI
class TweetDataset(Dataset):
    def __init__(self, texts, labels):
        self.encodings = tokenizer(texts, truncation=True, padding=True, max_length=128)
        self.labels = labels

    def __len__(self):
        return len(self.labels)

    def __getitem__(self, idx):
        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
        item["labels"] = torch.tensor(self.labels[idx])
        return item

# âœ… 7. DATASETâ€™LERÄ° OLUÅžTUR
train_dataset = TweetDataset(X_train, y_train)
val_dataset = TweetDataset(X_val, y_val)
test_dataset = TweetDataset(X_test, y_test)

# âœ… 8. MODEL
model = BertForSequenceClassification.from_pretrained("bert-base-multilingual-cased", num_labels=3)

# âœ… 9. EÄžÄ°TÄ°M ARGÃœMANLARI
training_args = TrainingArguments(
    output_dir="./results",  # Ã‡Ä±ktÄ± dosyalarÄ±nÄ±n saklanacaÄŸÄ± dizin
    save_strategy="epoch",   # Model her epokta kaydedilecek
    eval_strategy="epoch",  # DeÄŸerlendirme her epokta yapÄ±lacak (evaluation_strategy yerine eval_strategy)
    per_device_train_batch_size=16,  # EÄŸitimdeki batch boyutu
    per_device_eval_batch_size=16,   # DeÄŸerlendirme sÄ±rasÄ±nda batch boyutu
    num_train_epochs=5,      # Toplam eÄŸitim epoku
    logging_dir="./logs",    # Log dosyalarÄ±nÄ±n saklanacaÄŸÄ± dizin
    logging_steps=50,        # LoglarÄ±n her 50 adÄ±mda bir kaydedilmesi
    load_best_model_at_end=True,  # En iyi modelin eÄŸitim sonunda yÃ¼klenmesi
    metric_for_best_model="eval_loss",  # En iyi modeli seÃ§erken kullanÄ±lan metrik
    report_to="none"         # Loglama hizmeti (none kullanarak loglamayÄ± kapatabilirsiniz)
)





# âœ… 10. TRAINER
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=val_dataset
)

# âœ… 11. EÄžÄ°TÄ°M
trainer.train()

# âœ… 12. TAHMÄ°NLER
train_preds_output = trainer.predict(train_dataset)
train_preds = torch.argmax(torch.tensor(train_preds_output.predictions), axis=1)
train_labels = torch.tensor(train_preds_output.label_ids)

test_preds_output = trainer.predict(test_dataset)
test_preds = torch.argmax(torch.tensor(test_preds_output.predictions), axis=1)
test_labels = torch.tensor(test_preds_output.label_ids)

# âœ… 13. SINIFLANDIRMA RAPORLARI
class_names = class_names = ["Hate Speech", "Offensive", "Neither"]
print("ðŸ“Š TRAIN SETÄ°:")
print(classification_report(train_labels, train_preds, target_names=class_names))

print("\nðŸ“Š TEST SETÄ°:")
print(classification_report(test_labels, test_preds, target_names=class_names))

# âœ… 14. CONFUSION MATRÄ°X
fig, ax = plt.subplots(1, 2, figsize=(12, 5))
ConfusionMatrixDisplay.from_predictions(train_labels, train_preds, display_labels=class_names, cmap="Greens", ax=ax[0])
ax[0].set_title("Train Set Confusion Matrix")

ConfusionMatrixDisplay.from_predictions(test_labels, test_preds, display_labels=class_names, cmap="Blues", ax=ax[1])
ax[1].set_title("Test Set Confusion Matrix")
plt.show()